#!/usr/bin/env python3
import sys
try:
    sys.path.insert(0, './src')
    from SQLite import SQLite as DB
    import Logger, Cmdline, Configuration, OSMDB, SSHClient
    from Help import helpAndExit as helpAndExit
    from pprint import pprint
except ImportError as e:
    print(str(e), file=sys.stderr)
    print('Cannot find the module(s) listed above. Exiting.', file=sys.stderr)
    sys.exit(1)

short_options = {'--update'    : '-u',
                 '--network'   : '-n',
                 '--list'      : '-l',
                 '--execute'   : '-e',
                 '--deploy'    : '-d',
                 '--selection' : '-s',
                 '--purge'     : '-P',
                 '--add'       : '-A',
                 '--delete'    : '-D',
                 '--tags'      : '-t',
                 '--set-tag'   : '-T'}
                 
cmdline = Cmdline.Cmdline(sys.argv, short_options)
configuration = Configuration.Configuration()
logger = Logger.Logger()
logger.log_time = True
db = DB(configuration.configuration,logger)
logger.setLogfile(configuration.configuration['log_file'])
osmdb = OSMDB.OSMDB(configuration.configuration, db, logger)

# Use default route if none is specified.
if cmdline.option('n') in [False,True]: cmdline.options['n'] = OSMDB.getDefaultRoute()

# Object addition
if cmdline.option('A') is True: helpAndExit('add-all')
## URL addition
if cmdline.option('A') == 'url':
    if not cmdline.hasTag(): helpAndExit('add-url')
    for url in cmdline.tags:
        osmdb.addURL(url)
    exit(0)
## Host addition
elif cmdline.option('A') == 'host':
    if not cmdline.hasTag(): helpAndExit('add-host')
    for host in cmdline.tags:
        osmdb.addHost(host)
    exit(0)
## Help on addition
if cmdline.option('A'):
    print('Unknown object type: `{}`'.format(cmdline.option('A')), file=sys.stderr)
    helpAndExit('add')

# Update objects
## Host update
if cmdline.option('u') in ['host','hosts']:
    ping_delays = osmdb.pingHosts(cmdline.option('n'))
    osmdb.updateHosts(ping_delays,cmdline.option('n'))

# Host selection
if cmdline.option('s') is True: helpAndExit('selection')
hosts1 = []
hosts2 = []
for host in osmdb.selectHosts(cmdline.option('s')):
    hosts1 += (host[1],)
# Host selection by tags
if cmdline.option('t') is True: helpAndExit('selection-by-tag')
for host in osmdb.selectHostsByTags(cmdline.option('t')):
    hosts2 += (host[0],)
    
# Keep uniq hosts
hosts = hosts1 + hosts2
h_set = set(hosts)
hosts = list(h_set)

# If -t (and or -s) are the only options on command line then print the selection and exit.
if len(cmdline.options.keys()) == 2 and ( cmdline.option('t') or cmdline.option('s') ):
    osmdb.listHostsByNames(h_set)

# Instanciate a SSH client if option --execute or --deploy is used.
if 'd' in cmdline.options or 'e' in cmdline.options:
    ssh_client = SSHClient.SSHClient(logger=logger, configuration=configuration.configuration)
    osmdb.ssh = ssh_client

# Deploy 
if cmdline.option('d'):
    if cmdline.option('d') is True: osmdb.deploy(ssh_client.rsakey, osmdb.selectHosts(status='UP'))
    else: osmdb.deploy(ssh_client.rsakey, osmdb.selectHosts(cmdline.option('d'), status='ALL'))

# Execute
if cmdline.option('e'):
    if cmdline.option('e') is True: helpAndExit('execute')
    osmdb.execOnHosts(cmdline.option('e'), hosts)

# Purge host(s) which have two or more addresses for a given FQDN. It only keeps the most recent address.
if cmdline.option('P'):
    if cmdline.option('P') is True: osmdb.purgeHosts()
    else: osmdb.purgeHosts(cmdline.option('P'))
    
# List objects
if cmdline.option('l') is True: helpAndExit('list')
## List hosts
if cmdline.option('l') in ['host','hosts']:
    if cmdline.lastTag() in ['ALL','all']:
        hosts = db.listHosts(cmdline.option('s'), seen_up=False)
    else: hosts = db.listHosts(cmdline.option('s'), seen_up=True)
    osmdb.listHosts(hosts)
    exit(0)
## List updates
elif cmdline.option('l') in ['update','updates']:
    osmdb.listHostUpdates()
    exit(0)
## List executions
elif cmdline.option('l') in ['exec','execution','executions']:
    osmdb.listExecutions()
    exit(0)
## List URLs
elif cmdline.option('l') in ['url','urls']:
    for url in osmdb.listURL():
        print(url)
    exit(0)
## Help on list
if cmdline.option('l'):
    print('Unknown object type: `{}`'.format(cmdline.option('l')), file=sys.stderr)
    helpAndExit('list')


# Delete objects
if cmdline.option('D') is True: helpAndExit('delete')
## Print help message if no selection is made and no hostname is specified as tags.
if cmdline.option('D') and cmdline.option('s') == '*' and len(cmdline.tags) == 0: helpAndExit('delete-all')
## Delete hosts
if cmdline.option('D') in ['host','hosts']:
    fqdn_list = []
    if cmdline.option('s') != '*':
        hosts = db.hosts(query=cmdline.option('s'))
    else: hosts = []
    for host in hosts: fqdn_list.append(host[1])
    for fqdn in cmdline.tags: fqdn_list.append(fqdn)
    fqdn_set = set(fqdn_list)
    fqdn_list = list(fqdn_set)
    osmdb.deleteHosts(fqdn_list)

    exit(0)

## Help on delete
if cmdline.option('D'):
    print('Unknown object type: `{}`'.format(cmdline.option('D')), file=sys.stderr)
    helpAndExit('delete')


