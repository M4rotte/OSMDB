#!/usr/bin/env python3
import sys
try:
    sys.path.insert(0, './src')
    from SQLite import SQLite as DB
    import Logger, Cmdline, Configuration, OSMDB, SSHClient
    from Help import helpAndExit as helpAndExit
except ImportError as e:
    print(str(e), file=sys.stderr)
    print('Cannot find the module(s) listed above. Exiting.', file=sys.stderr)
    sys.exit(1)

short_options = {'--update'    : '-u',
                 '--network'   : '-n',
                 '--list'      : '-l',
                 '--execute'   : '-e',
                 '--deploy'    : '-d',
                 '--selection' : '-s',
                 '--purge'     : '-P',
                 '--add'       : '-A'}
                 
cmdline = Cmdline.Cmdline(sys.argv, short_options)
configuration = Configuration.Configuration()
logger = Logger.Logger()
logger.log_time = True
db = DB(configuration.configuration,logger)
logger.setLogfile(configuration.configuration['log_file'])
osmdb = OSMDB.OSMDB(configuration.configuration, db, logger)

if cmdline.option('n') in [False,True]: cmdline.options['n'] = OSMDB.getDefaultRoute()
if cmdline.option('s') in [False]: cmdline.options['s'] = '*'

if cmdline.option('A') is True: helpAndExit('add-all')
if cmdline.option('A') == 'url':
    if not cmdline.hasTag(): helpAndExit('add-url')
    for url in cmdline.tags:
        osmdb.addURL(url)
    exit(0)
elif cmdline.option('A') == 'host':
    if not cmdline.hasTag(): helpAndExit('add-host')
    for host in cmdline.tags:
        osmdb.addHost(host)
    exit(0)
if cmdline.option('A'):
    print('Unknown object type: `{}`'.format(cmdline.option('A')), file=sys.stderr)
    helpAndExit('add')

if cmdline.option('u') in ['host','hosts']:
    ping_delays = osmdb.pingHosts(cmdline.option('n'))
    osmdb.updateHosts(ping_delays,cmdline.option('n'))

if cmdline.option('s') is True: helpAndExit('selection')
hosts = osmdb.selectHosts(cmdline.option('s'))

if 'd' in cmdline.options or 'e' in cmdline.options:
    ssh_client = SSHClient.SSHClient(logger=logger, configuration=configuration.configuration)
    osmdb.ssh = ssh_client

if cmdline.option('d'):
    if cmdline.option('d') is True: osmdb.deploy(ssh_client.rsakey, osmdb.selectHosts())
    else: osmdb.deploy(ssh_client.rsakey, osmdb.selectHosts(cmdline.option('d')))

if cmdline.option('e'):
    if cmdline.option('e') is True: helpAndExit('execute')
    osmdb.execOnHosts(cmdline.option('e'), hosts)

if cmdline.option('P'):
    if cmdline.option('P') is True: osmdb.purgeHosts()
    else: osmdb.purgeHosts(cmdline.option('P'))
    

if cmdline.option('l') is True: helpAndExit('list')
if cmdline.option('l') in ['host','hosts']:
    hosts = db.listHosts(cmdline.option('s'))
    osmdb.listHosts(hosts)
    exit(0)
elif cmdline.option('l') in ['update','updates']:
    osmdb.listHostUpdates()
    exit(0)
elif cmdline.option('l') in ['exec','execution','executions']:
    osmdb.listExecutions()
    exit(0)
elif cmdline.option('l') in ['url','urls']:
    for url in osmdb.listURL():
        print(url)
    exit(0)
if cmdline.option('l'):
    print('Unknown object type: `{}`'.format(cmdline.option('l')), file=sys.stderr)
    helpAndExit('list')


# ~ osmdb.deploy(osmdb.ssh.pubkey(), 'root@ivanka')
