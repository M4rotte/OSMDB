#!/usr/bin/env python3
import sys
try:
    sys.path.insert(0, './src')
    from SQLite import SQLite as DB
    import Logger, Cmdline, Configuration, OSMDB, SSHClient
    from Help import helpAndExit as helpAndExit
    from pprint import pprint
    from multiprocessing import Queue, Process
    from time import sleep
except ImportError as e:
    print(str(e), file=sys.stderr)
    print('Cannot find the module(s) listed above. Exiting.', file=sys.stderr)
    sys.exit(1)

short_options = {'--update'    : '-u',
                 '--network'   : '-n',
                 '--list'      : '-l',
                 '--execute'   : '-e',
                 '--deploy'    : '-d',
                 '--selection' : '-s',
                 '--purge'     : '-P',
                 '--add'       : '-A',
                 '--delete'    : '-D',
                 '--tags'      : '-t',
                 '--set-tag'   : '-T',
                 '--get-param' : '-x',
                 '--set-param' : '-X',
                 }
                 
cmdline = Cmdline.Cmdline(sys.argv, short_options)
configuration = Configuration.Configuration()
logger = Logger.Logger()
logger.log_time = True
db = DB(configuration.configuration,logger)
logger.setLogfile(configuration.configuration['log_file'])
osmdb = OSMDB.OSMDB(configuration.configuration, db, logger)

# Use default route if none is specified.
if cmdline.option('n') in [False,True]: cmdline.options['n'] = OSMDB.getDefaultRoute()

# Object addition
if cmdline.option('A') is True: helpAndExit('add-all')
## URL addition
if cmdline.option('A') == 'url':
    if not cmdline.hasTag(): helpAndExit('add-url')
    for url in cmdline.tags:
        osmdb.addURL(url)
    sys.exit(0)
## Host addition
elif cmdline.option('A') == 'host':
    if not cmdline.hasTag(): helpAndExit('add-host')
    for host in cmdline.tags:
        osmdb.addHost(host)
    sys.exit(0)
## Help on addition
if cmdline.option('A'):
    print('Unknown object type: `{}`'.format(cmdline.option('A')), file=sys.stderr)
    helpAndExit('add')

# Update objects
## Host update
if cmdline.option('u') in ['host','hosts']:
    ping_delays = osmdb.pingHosts(cmdline.option('n'))
    osmdb.updateHosts(ping_delays,cmdline.option('n'))

## Update URLs [WIP]
if cmdline.option('u') in ['url','urls']:
    osmdb.updateURLs()

# Host selection
if cmdline.option('s') is True: helpAndExit('selection')
hosts1 = []
hosts2 = []
for host in osmdb.selectHosts(cmdline.option('s')):
    hosts1 += (host[1],)
## Host selection by tags
if cmdline.option('t') is True: helpAndExit('selection-by-tag')
for host in osmdb.selectHostsByTags(cmdline.option('t')):
    hosts2 += (host[0],)
## Keep uniq hosts
hosts = hosts1 + hosts2
h_set = set(hosts)
hosts = list(h_set)

## Selection name
selname = ''
if cmdline.option('s'): selname += cmdline.option('s')
if cmdline.option('t'): selname += '|'+cmdline.option('t')

## If a selection has been made (SQL or tag query) but no host is returned: warn about it and exit.
if selname != '' and len(hosts) == 0:
    print('Selection is empty. Nothing to do.', file=sys.stderr)


## Update the host selection (if any)
if cmdline.option('u') in ['selection','sel'] and len(hosts) > 0:
    ping_delays = osmdb.pingAddresses(hosts)
    osmdb.updateHosts(ping_delays,selname)

## Update SNMP on host selection (if any)
if cmdline.option('u') in ['snmp']:
    res = osmdb.getSNMP(hosts, 'SNMPv2-MIB', 'sysDescr')
    res += osmdb.getSNMP(hosts, 'SNMPv2-MIB', 'sysUpTime')
    osmdb.updateSNMP(res,selname)
    
## If no selection is made nor object type is specified, but update is asked, then update all hosts which has been seen at least once. 
if cmdline.option('u') is True and not (cmdline.option('t') or cmdline.option('s')):
    hosts = []
    for host in osmdb.selectHosts('ip LIKE "%"'): hosts += (host[1],)
    ping_delays = osmdb.pingAddresses(hosts)
    osmdb.updateHosts(ping_delays,'ip LIKE "%"')

# If -t (or -s) are the only options on command line then print the selection and exit.
if len(cmdline.options.keys()) in [2,3] and ( cmdline.option('t') or cmdline.option('s') ):
    osmdb.listHostsByNames(hosts)
    sys.exit(0)

# Instanciate a SSH client if option --execute or --deploy is used.
if 'd' in cmdline.options or 'e' in cmdline.options:
    ssh_client = SSHClient.SSHClient(logger=logger, configuration=configuration.configuration)
    osmdb.ssh = ssh_client

# Deploy 
if cmdline.option('d'):
    if cmdline.option('d') is True: osmdb.deploy(ssh_client.rsakey, osmdb.selectHosts(status='UP'))
    else: osmdb.deploy(ssh_client.rsakey, osmdb.selectHosts(cmdline.option('d'), status='ALL'))

# Execute
if cmdline.option('e'):
    if cmdline.option('e') is True: helpAndExit('execute')
    osmdb.execOnHosts(cmdline.option('e'), hosts)

# Purge host(s) which have two or more addresses for a given FQDN. It only keeps the most recent address.
# Only addresses which have been seen at least once up are taken into account.
if cmdline.option('P'):
    if cmdline.option('P') is True: osmdb.purgeHosts()
    else: osmdb.purgeHosts(cmdline.option('P'))
    
# List objects
## List hosts
if cmdline.option('l') in ['host','hosts']:
    if cmdline.lastTag() in ['ALL','all']:
        hosts = db.listHosts(cmdline.option('s'), seen_up=False)
    else: hosts = db.listHosts(cmdline.option('s'), seen_up=True)
    osmdb.listHosts(hosts)
    sys.exit(0)
## List updates
elif cmdline.option('l') in ['update','updates']:
    osmdb.listHostUpdates()
    sys.exit(0)
## List executions
elif cmdline.option('l') in ['exec','execution','executions']:
    osmdb.listExecutions()
    sys.exit(0)
## List URLs
elif cmdline.option('l') in ['url','urls']:
    for url in osmdb.listURL():
        print(repr(url))
    sys.exit(0)
## Help on list
elif cmdline.option('l'):
    print('Unknown object type: `{}`'.format(cmdline.option('l')), file=sys.stderr)
    helpAndExit('list')


# Delete objects
if cmdline.option('D') is True: helpAndExit('delete-all')
## Print help message if no selection is made and no hostname is specified as tags.
if cmdline.option('D') and cmdline.option('s') == '*' and len(cmdline.tags) == 0: helpAndExit('delete-all')
## Delete hosts
if cmdline.option('D') in ['host','hosts']:
    fqdn_list = []
    hosts = db.hosts(query=cmdline.option('s'), status='ALL')
    for host in hosts: fqdn_list.append(host[1])
    for fqdn in cmdline.tags: fqdn_list.append(fqdn)
    fqdn_set = set(fqdn_list)
    fqdn_list = list(fqdn_set)
    if len(fqdn_list) > 0: osmdb.deleteHosts(fqdn_list)
    else: helpAndExit('delete-host')
    sys.exit(0)

## Delete URLs
if cmdline.option('D') in ['url']:
    if cmdline.lastTag():
        osmdb.deleteURLs(cmdline.lastTag())
    else: helpAndExit('delete-url')

# Tag hosts
if cmdline.option('T') is True or ( cmdline.option('T') and not cmdline.lastTag() and not cmdline.option('t') and not cmdline.option('s')): helpAndExit('tag-hosts')
## Use the host selection query directly provided as last tag (last non option/value token on the command line)
if cmdline.option('T') and not (cmdline.option('s') or cmdline.option('t')) :
    for host in osmdb.selectHosts(cmdline.lastTag()):
        osmdb.tagHost(host[1],cmdline.option('T'), cmdline.option('-description'))
## Use the main hostname selection (union of --selection (-s) and --tags (-t) options) as soon as one of the two options is present.
elif cmdline.option('T'):
    for hostname in hosts:
        osmdb.tagHost(hostname,cmdline.option('T'),cmdline.option('-description'))

# Set parameter
if cmdline.option('X') is True and (not cmdline.option('s') and not cmdline.option('t')): helpAndExit('set-param')
elif cmdline.option('X') and cmdline.lastTag() and cmdline.option('X') is not True:
    try:
        param,value = cmdline.lastTag().split('=')
        osmdb.setParam(cmdline.option('X'),param,value)
    except ValueError: helpAndExit('set-param')
elif cmdline.option('X') is True and (cmdline.option('s') or cmdline.option('t')) and cmdline.lastTag():
    try:
        param,value = cmdline.lastTag().split('=')
        for host in hosts:
            osmdb.setParam(host,param,value)
    except ValueError: helpAndExit('set-param')

# Get parameter
if cmdline.option('x') is True: helpAndExit('get-param')
if cmdline.option('x') and cmdline.lastTag():
    print(osmdb.getParam(cmdline.lastTag(),cmdline.option('x')))
    

# Commit to database what has not yet been committed: tags, parameters
osmdb.db.commit()
